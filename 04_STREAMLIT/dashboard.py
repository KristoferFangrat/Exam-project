import streamlit as st
from connect import query_events
import pandas as pd
import numpy as np
import plotly.express as px

def layout():
    global df
    df = query_events()
    def map():
            st.subheader("Information om h√§ndelse")

            fig = px.scatter_mapbox(filtered_data, lat="LATITUDE",
                                    lon="LONGITUDE",
                                    hover_name="LOCATION",
                                    hover_data=[ "CATEGORY"],
                                    color_discrete_sequence=["red"],
                                    zoom=4, height=800)
            fig.update_layout(mapbox_style="open-street-map")
            st.plotly_chart(fig)
            sorted_events = sorted(filtered_data["EVENT"].unique())
            selected_event_name = st.selectbox("Select a event:", filtered_data["EVENT"].unique())
            selected_event = filtered_data[filtered_data["EVENT"] == selected_event_name].iloc[0]
            st.write(f"**Category:** {selected_event['CATEGORY']}")
            st.write(f"**Event:** {selected_event['EVENT']}")
            st.write(f"**Location:** {selected_event['LOCATION']}")
            st.write(f"**Summary:** {selected_event['SUMMARY']}")
            st.write(f"**Time:** {selected_event['TIME']}")
            st.write(f"**Temperature:** {selected_event['TEMPERATURE']}¬∞C")
            if selected_event['TEMPERATURE'] > 0 and selected_event['PRECIPITATION'] > 0:
                st.write(f"**Precipitation:** {selected_event['PRECIPITATION']} mm:rain_cloud:")
            elif selected_event['TEMPERATURE'] < 0 and selected_event['PRECIPITATION'] > 0:
                st.write(f"**Precipitation:** {selected_event['PRECIPITATION']} mm:snow_cloud:")
                # st.snow()
            else:
                st.write(f"**Precipitation:** {selected_event['PRECIPITATION']} mm")
            
    menu = ["Home", "Event Finder", "About"]
    choice = st.sidebar.selectbox("Menu",menu)
    if choice == "Home":
        st.title("Polisens h√§ndelse√∂versikt")
        st.image("C:/Users/Timot/Documents/github/examensarbete/Policebackgroung.png")
        col1, col2, col3 = st.columns(3)
        event_count = len(df["EVENT"])
        col1.metric("Antal h√§ndelser:police_car:", event_count)
        traffic = (df["CATEGORY"] == "Trafikolycka").sum()
        col2.metric("Antal trafikolyckor:ambulance:", traffic)
        col3.metric("H√§ndelser per dag:rotating_light:", round(event_count / 30, 1))
        
        st.write('''P√• den h√§r sidan hittar du statistik och information om svenska polisens h√§ndelser ute i f√§lt. 
                 Titta i statistiken eller s√∂k efter specifika h√§ndelser. Ut√∂ver Polisens h√§nderlser s√• kan du d√• en insikt 
                 √∂ver v√§derf√∂rh√•llanden p√• plats.''')
        
        st.write('''Nedan ser vi top 5 h√§ndelser per kategori''')
        st.bar_chart(
        query_events(
        """
            SELECT 
                COUNT(CATEGORY) as AMOUNT_CATEGORY,
                CATEGORY
            FROM 
                mart_events
            GROUP BY 
                CATEGORY
            ORDER BY AMOUNT_CATEGORY DESC LIMIT 5;
            """
            ),
            x="CATEGORY",
            y="AMOUNT_CATEGORY",
            )
        st.write('''H√§r visas top 5 antal h√§ndelser per ort.''')
        st.bar_chart(
        query_events(
            """
                SELECT 
                    COUNT(LOCATION) as TOT_EVENTS,
                    LOCATION
                FROM 
                    mart_events
                GROUP BY 
                    LOCATION
                ORDER BY TOT_EVENTS DESC LIMIT 5;
                """
        ),
        x="LOCATION",
        y="TOT_EVENTS",
        )
        st.write('''H√§r visas de fem kallaste platserna d√§r event har skett.''')
        st.bar_chart(
        query_events(
            """
                SELECT 
                    MIN(TEMPERATURE) as MIN_TEMPERATURE,
                    LOCATION
                FROM 
                    mart_events
                GROUP BY 
                    LOCATION
                ORDER BY MIN_TEMPERATURE ASC LIMIT 5;
                """
        ),
        x="LOCATION",
        y="MIN_TEMPERATURE",
        ) 
        st.write('''H√§r visas de fem varmaste platserna d√§r event har skett''')
        st.bar_chart(
        query_events(
            """
                SELECT 
                    MAX(TEMPERATURE) as MAX_TEMPERATURE,
                    LOCATION
                FROM 
                    mart_events
                GROUP BY 
                    LOCATION
                ORDER BY MAX_TEMPERATURE DESC LIMIT 5;
                """
        ),
        x="LOCATION",
        y="MAX_TEMPERATURE",
        )
        st.write('''H√§r kan man filtrera fram nederb√∂rd per ort.''')
        selected_location = st.selectbox("Select a location:", df["LOCATION"].unique())
        
        st.line_chart(
            query_events(
                f"""
                    SELECT 
                        TIME,
                        PRECIPITATION,
                        LOCATION
                    FROM 
                        mart_events
                    WHERE 
                        LOCATION = '{selected_location}'
                    ;
                """
            ),
            x="TIME",
            y="PRECIPITATION",
            )
        
    

    elif choice == "Event Finder":
        st.title("Hitta en h√§ndelse")
        find = st.selectbox("Hur vill du s√∂ka fram h√§ndelser?", ["Kategori", "Plats", "Datum"], index=None, placeholder="V√§lj alternativ")
        if find == "Kategori":
            selected_category = st.selectbox("V√§lj en kategori:", df["CATEGORY"].unique())
            filtered_data = df[df["CATEGORY"] == selected_category]
            map()
        elif find == "Plats":
            selected_category = st.selectbox("V√§lj en plats:", df["LOCATION"].unique())
            filtered_data = df[df["LOCATION"] == selected_category]
            map()
        elif find == "Datum":
            options = sorted(df["TIME"].unique().tolist()) 

            selected_category = st.select_slider("V√§lj en tid:", options)
            filtered_data = df[df["TIME"] == selected_category]
            map()
        else:
            st.write("Inget valt")



        
        
        
        
        

        
    else:
        st.subheader("Om")
        st.write('''V√§lkommen till v√•r visualiseringssida ‚Äì en del av v√•rt examensarbete! üéì

Den h√§r sidan √§r skapad med syftet att presentera data p√• ett snyggt och anv√§ndarv√§nligt s√§tt, samtidigt som vi testar v√•ra kunskaper och utmanar oss sj√§lva under v√•r utbildning. Observera att allt inneh√•ll p√• den h√§r sidan √§r resultatet av ett studentprojekt, vilket betyder att det kan finnas buggar, felaktigheter eller till och med n√•got som √§r rent hittep√• (vi lovar att vi f√∂rs√∂kt v√•rt b√§sta dock!).

Ansvarsfriskrivning:
Informationen som visas h√§r ska tas med en nypa salt. Vi tar inget ansvar f√∂r hur den anv√§nds, tolkas eller om den p√• n√•got s√§tt p√•verkar din dag negativt. Har du feedback, funderingar eller bara vill ge oss en klapp p√• axeln f√∂r v√•rt arbete? H√∂r g√§rna av dig!

Tack f√∂r att du kikar in, och kom ih√•g ‚Äì det h√§r √§r bara b√∂rjan p√• v√•r resa som (f√∂rhoppningsvis) framtida datan√∂rdar. üöÄ

''')
        st.write(":rainbow[Obs, texten √§r AI genererad.]")

    


    


    
    


if __name__ == "__main__":
    layout()